简介
这是一个对java远程调用的简要描述。javaRMI是一种调用另一个地址空间的对象方法的机制。这个地址空间有可能会在同一台机器上有可能不在同一台机器上。RMI是面向对象远程控制原理机制的基础。CORBA是另一种面向对象的RPC机制，CORBA和JAVA RMI有几个不同之处：
   1.CORBA是一种语言标准
   2.CORBA标准中包含了许多其他的机制(像一个TP监视器)没有一个属于java RMI的
   3.java RMI中也没有对象请求中间人这个概念。
java RMI近来正在朝着对CORBA有更多的兼容性方面发展。尤其现在有一种叫做RMI/IIOP的形式，这种形式使用internet的CORBA的交互ORB协议（IIOP）作为RMI通信的基础。
这个教程试着给你讲述RMI的实质，而不是讨论跟这个没有关联的其它特性。Sun提供了一个RMI的向导，但是其中的许多资料对于RMI并不是重要的。例如，它教你怎么样把RMI整合到Applet中，怎么样使用包，还有怎么样在不同的目录中放置被编译的类而不是源码。对于人们感兴趣的部分，他们一点都没有提及。像这样的结果，Sun的向导是多此一举。而且，Sun的向导和例子遗漏了许多RMI重要的信息。
有三种共享远程方法调用的处理
   1.客户端的进程调用远程对象的方法
   2.服务端的进程拥有远程对象，远程对象在服务器进程的地址空间中是一个普通对象
   3.Registry对象是一个用名称关联的对象命名服务器，对象会被对象注册器注册，一旦对象被注册了，那么就可以通过这个被注册的对象名称来访问远程对象
在这段教程中，我们会给一个客户端和服务器端的例子来解决经典的“Hello, world!"问题，你应当尝试提取这些被提供的代码在你的电脑上运行。
在java RMI中有两种类能被使用：
   1.一个远程类是能被远程访问的实例，像这样的类对象可以用两种不同的方式来影射：
      1.在地址空间中对象会被构造，这个对象是一个普通的对象，它可以像其它类那样被使用
	  2.在其它的地址空间中，对象可以通过一个对象句柄来影射。然而在如何用这个对象句柄跟其它的对象比较上面还有一些局限性，对于大多数的对象，可以像使用普通的对象一样使用对象句柄。
   2.一个序列化类是可以在两个不同的地址空间之间被复制的实例。一个序列化类的实例会被叫做一个序列化对象。换句话说，一个序列化对象是能被编制的。注意这个概念和数据库管理系统概念没有任何关系。
   
   如果一个序列化对象在一个远程方法调用中被当做参数传递，那么这个对象的值会从一个地址空间复制到另一个。通过对比，如果一个远程对象被当做参数(返回值)传递,那么这个对象句柄会从一个地址空间被复制到另一个地址空间。
可能会怀疑如果一个类既是远程的又是序列化的会发生什么。然而在理论上这是可能的，这种糟糕的设计会混淆两种概念，并且使设计理解起来更困难。

序列化类
我们刚刚考虑了怎么样设计远程和序列化类，两者中更容易的是序列化类。如果一个类实现了java.io.Serializable接口就是可序列化的，一个可序列化的子类也是可序列化的。许多标准类是可序列化的，因此这些类的子类也自动的可以被序列化。通常，在一个序列化类中的任何数据应道也是可序列化的。尽管有一些方式可以在一个序列化对象中包含非序列化对象，但是这样做是愚蠢的。关于这个，去看java.io.Serizlizable的文档获取更多信息。
在一个远程方法调用中直接使用序列化对象。一种简单的传递对象是使用参数或者作为一个返回值。参数或者返回值的类型是一个序列化类。注意在客户端和服务端程序必须可以访问这些定义的序列化类。如果客户端和服务端程序不在不同的机器上，那么序列化类的定义也许必须从一台机器上下载到另一台机器上。像这样的下载可能会违反系统安全。这个问题会在安全部分被讨论。

序列化类中在'hello,world"例子中被使用，这个例子是String类，因此不存在安全问题。