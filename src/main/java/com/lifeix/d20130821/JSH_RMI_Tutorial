JAVA RMI 指导说明：
介绍：
这是一个关于JAVA远程调用（RMI）的简短介绍，JAVA RMI 是允许运行在另一个地址的主机调用本地方法的一种机制。另一个地址可以是本地机器或者别的机器，RMI机制是基于
object-oriebted RPC机制的。CORBA是另一个object-oriebted RPC机制的实现。CORBA不同于JAVA RMI有以下几点：
1.CORBA是一种独立语言的标准；
2.CORBA包含太多别的机制在它的标准里（例如TP monitors的标准），没有任何一个是JAVA RMI的一部分；
3.JAVA RMI也没有“对象请求代理”的概念。
JAVA RMI朝着更好的兼容于CORBA发展，在个别项目中存在着一个叫RMI/IIOP的RMI表单，它使用了CORBA的Internet Inter-ORB Protocol (IIOP)作为RMI通讯的底层协议。
这个说明意图展示RMI的本质，没有任何无关的论述。Sun公司提供了一个使用RMI的指南，但是它包含了太多对RMI本身无关重要的说明。例如：它论述了如何使用RMI在一个小应用程序里，如何使用包
和如何编译类在不同的源码路径下。所有这些都是很有意思的在它们本身，但是与RMI没有太多关系。如此，Sun公司提供的指南是没有必要的，而且Sun公司的指南遗漏了很多RMI重要的细节。
这是使用RMI的三步：
1.客户端是有一个在远程对象上调用方法的程序；
2.服务器是一个拥有远程对象的程序，这个远程对象在服务器端是一个普通的对象；
3.这个对象注册表是有着跟服务器相关的名称，对象注册在对象注册表中，一旦一个对象注册，就可以通过对象注册表使用这个对象。
在这个说明中，我们将给出一个处理“Hello， world！”问题的客户端和服务器端的例子。你可以试着提取提供的代码运行在你的本地电脑。
这是两种使用JAVA RMI的类：
1.远程类是一个依附于能够远程调用的实体，一个对象能够引用两种不同的方式：
  1.根据地址空间构建对象，这个对象是一个类似于别的对象使用的普通对象；
  2.在别的地址主机上，这个对象能够引用于使用一个对象处理。如果使用这个对象处理和其他对象比较还有一定的局限性，对于大多数对象，可以像普通对象一样处理。
2.一个序列化类是一个能够从一个地址复制到另一个地址的实例，一个序列化的实例被称为一个序列化对象，换句话说，一个序列化对象是一个能整理的对象。记录了没有链接到这个序列化在数据库管理系统的概念。
如果一个序列化对象是传了参数或者有返回值，这个值的对象将拷贝从一个地址到另一个地址。如果一个远程对象是传参数或者返回值比较，这个对象的处理将拷贝从一个地址到另一个地址。
如果一个类既实现了远程又实现了序列化，一个奇迹将发生，它是可能的在理论上，这是一个很差的设计拥有两个设计不同的概念。
序列化类：
我们现在考虑下怎样将一个类设计为远程和序列化，比较简单的是序列化类，如果一个类实现了java.io.Serializable接口这个类就是序列化的。
一个序列化类的子类也是序列化的。正常情况下，序列化类的任何数据也将被序列化，但是有很多中情况，包括没有序列化的对象在序列化类里，这将是不合适的。查看java.io.Serializable的文档关于这个信息。
使用一个序列化对象在远程方法调用中是直接了当的。一次简单的执行这个对象使用参数或者返回值，参数或者返回值的类型是序列化的类，如果客户端和服务器端是在不同的机器，
这个序列化的类可能将会从一台机器下载到另一台。这样的一个下载将会影响系统安全。安全的问题在被讨论着。这个仅仅序列化的使用“Hello，world！”的类是一个String类型的类，所以没有安全问题。